https://gitlab.com/veloren/veloren/-/merge_requests/4466

--- Cargo.lock.orig	2024-05-15 12:12:16 UTC
+++ Cargo.lock
@@ -47,17 +47,6 @@ name = "ahash"
 
 [[package]]
 name = "ahash"
-version = "0.7.8"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9"
-dependencies = [
- "getrandom 0.2.12",
- "once_cell",
- "version_check",
-]
-
-[[package]]
-name = "ahash"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011"
@@ -4474,16 +4463,6 @@ dependencies = [
 ]
 
 [[package]]
-name = "packed_simd"
-version = "0.3.9"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1f9f08af0c877571712e2e3e686ad79efad9657dbf0f7c3c8ba943ff6c38932d"
-dependencies = [
- "cfg-if 1.0.0",
- "num-traits",
-]
-
-[[package]]
 name = "parking"
 version = "2.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -5794,8 +5773,9 @@ name = "shred"
 
 [[package]]
 name = "shred"
-version = "0.15.0"
-source = "git+https://github.com/amethyst/shred.git?rev=5d52c6fc390dd04c12158633e77591f6523d1f85#5d52c6fc390dd04c12158633e77591f6523d1f85"
+version = "0.16.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "656294f5bdcf6d33f0cf89e88a72b58595e3fca0e77e4a4b9e9026179757fb1e"
 dependencies = [
  "ahash 0.8.11",
  "arrayvec",
@@ -5808,8 +5788,9 @@ name = "shred-derive"
 
 [[package]]
 name = "shred-derive"
-version = "0.6.3"
-source = "git+https://github.com/amethyst/shred.git?rev=5d52c6fc390dd04c12158633e77591f6523d1f85#5d52c6fc390dd04c12158633e77591f6523d1f85"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "69760b786f8b40361c10663eb63c81fa7d828008527d26aa7595b99c53ab3a8d"
 dependencies = [
  "proc-macro2 1.0.79",
  "quote 1.0.35",
@@ -5943,10 +5924,9 @@ version = "0.20.0"
 [[package]]
 name = "specs"
 version = "0.20.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a60eabdfd5a80e458c3e7bcc9f1076d6ce3cc8ddb71d69691f00fc0de735a635"
+source = "git+https://github.com/amethyst/specs.git?rev=4e2da1df29ee840baa9b936593c45592b7c9ae27#4e2da1df29ee840baa9b936593c45592b7c9ae27"
 dependencies = [
- "ahash 0.7.8",
+ "ahash 0.8.11",
  "crossbeam-queue",
  "hibitset",
  "log",
@@ -5962,8 +5942,7 @@ version = "0.4.1"
 [[package]]
 name = "specs-derive"
 version = "0.4.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3e23e09360f3d2190fec4222cd9e19d3158d5da948c0d1ea362df617dd103511"
+source = "git+https://github.com/amethyst/specs.git?rev=4e2da1df29ee840baa9b936593c45592b7c9ae27#4e2da1df29ee840baa9b936593c45592b7c9ae27"
 dependencies = [
  "proc-macro2 1.0.79",
  "quote 1.0.35",
@@ -6816,9 +6795,9 @@ name = "vek"
 
 [[package]]
 name = "vek"
-version = "0.16.1"
+version = "0.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c85158043f3bc1fac596d59a77e07948da340b9951b451ed4cb4a8c480aa2157"
+checksum = "cb40015035f83ba23d647e647f8be060d0f6f99b7c7687989fbca3e3d65e7234"
 dependencies = [
  "approx 0.5.1",
  "num-integer",
@@ -6848,7 +6827,7 @@ dependencies = [
  "specs",
  "tokio",
  "tracing",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-client-i18n",
  "veloren-common",
  "veloren-common-base",
@@ -6919,7 +6898,7 @@ dependencies = [
  "tracing",
  "tracing-subscriber",
  "uuid",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common-assets",
  "veloren-common-base",
  "veloren-common-i18n",
@@ -7004,7 +6983,7 @@ dependencies = [
  "specs",
  "sum_type",
  "tracing",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
 ]
 
@@ -7028,7 +7007,7 @@ dependencies = [
  "timer-queue",
  "toml 0.8.12",
  "tracing",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
  "veloren-common-assets",
  "veloren-common-base",
@@ -7048,7 +7027,7 @@ dependencies = [
  "rayon",
  "specs",
  "tracing",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-ecs",
@@ -7132,7 +7111,7 @@ dependencies = [
  "serde",
  "slotmap",
  "tracing",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
  "veloren-world",
 ]
@@ -7175,7 +7154,7 @@ dependencies = [
  "strum 0.24.1",
  "tokio",
  "tracing",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-ecs",
@@ -7198,7 +7177,7 @@ dependencies = [
  "rand 0.8.5",
  "specs",
  "tracing",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-dynlib",
@@ -7295,7 +7274,7 @@ dependencies = [
  "tokio",
  "tracing",
  "treeculler",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-client",
  "veloren-client-i18n",
  "veloren-common",
@@ -7323,7 +7302,7 @@ dependencies = [
 dependencies = [
  "bytemuck",
  "lazy_static",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
  "veloren-common-dynlib",
 ]
@@ -7379,7 +7358,6 @@ dependencies = [
  "num 0.4.1",
  "num-traits",
  "ordered-float 3.9.2",
- "packed_simd",
  "rand 0.8.5",
  "rand_chacha 0.3.1",
  "rayon",
@@ -7392,7 +7370,7 @@ dependencies = [
  "svg_fmt",
  "tracing",
  "tracing-subscriber",
- "vek 0.16.1",
+ "vek 0.17.0",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-dynlib",
--- Cargo.toml.orig	2024-05-15 12:12:16 UTC
+++ Cargo.toml
@@ -1,5 +1,3 @@
-cargo-features = ["named-profiles", "profile-overrides"]
-
 [workspace]
 resolver = "2"
 members = [
@@ -142,7 +140,7 @@ num-traits = { version = "0.2" }
 ordered-float = { version = "3", default-features = true }
 num = { version = "0.4" }
 num-traits = { version = "0.2" }
-vek = { version = "0.16.1", features = ["serde"] }
+vek = { version = "0.17.0", features = ["serde"] }
 itertools = { version = "0.10" }
 
 serde = { version = "1.0.118", features = ["derive"] }
@@ -159,7 +157,8 @@ hex = "0.4.3"
 hex = "0.4.3"
 
 [patch.crates-io]
-shred = { git = "https://github.com/amethyst/shred.git", rev = "5d52c6fc390dd04c12158633e77591f6523d1f85" }
+# until next specs release
+specs = { git = "https://github.com/amethyst/specs.git", rev = "4e2da1df29ee840baa9b936593c45592b7c9ae27" }
 # This is needed because of:
 # * an issue with spirv & naga in wgpu 0.18 (I assume this is fixed upstream but not in 0.18)
 # * an issue with uint in uniforms for gl. (potentially fixed in 0.19?)
--- client/i18n/src/error.rs.orig	2024-05-15 12:12:16 UTC
+++ client/i18n/src/error.rs
@@ -45,6 +45,7 @@ pub enum ResourceErr {
         #[allow(dead_code)] // false-positive
         err: String,
     },
+    #[allow(dead_code)] // false-positive
     BundleError(String),
 }
 
--- common/query_server/src/proto.rs.orig	2024-05-15 12:12:16 UTC
+++ common/query_server/src/proto.rs
@@ -1,3 +1,4 @@
+#![allow(non_local_definitions)] //TODO: added 2024-05-15 to update toolchain
 use protocol::Protocol;
 
 pub(crate) const VERSION: u16 = 0;
--- rtsim/src/lib.rs.orig	2024-05-15 12:12:16 UTC
+++ rtsim/src/lib.rs
@@ -7,7 +7,8 @@
     binary_heap_drain_sorted,
     fn_traits,
     unboxed_closures,
-    tuple_trait
+    tuple_trait,
+    trait_upcasting
 )]
 
 pub mod ai;
--- rust-toolchain.orig	2024-05-15 12:12:16 UTC
+++ rust-toolchain
@@ -1 +1 @@
-nightly-2024-01-17
+nightly-2024-05-14
--- server/agent/src/lib.rs.orig	2024-05-15 12:12:16 UTC
+++ server/agent/src/lib.rs
@@ -1,4 +1,4 @@
-#![feature(exclusive_range_pattern, let_chains)]
+#![feature(let_chains)]
 #![allow(
     clippy::needless_pass_by_ref_mut //until we find a better way for specs
 )]
--- server/src/persistence/models.rs.orig	2024-05-15 12:12:16 UTC
+++ server/src/persistence/models.rs
@@ -1,5 +1,6 @@ pub struct Character {
 pub struct Character {
     pub character_id: i64,
+    #[allow(dead_code)]
     pub player_uuid: String,
     pub alias: String,
     pub waypoint: Option<String>,
@@ -16,6 +17,7 @@ pub struct Body {
 }
 
 pub struct Body {
+    #[allow(dead_code)]
     pub body_id: i64,
     pub variant: String,
     pub body_data: String,
@@ -38,6 +40,7 @@ pub struct AbilitySets {
 }
 
 pub struct AbilitySets {
+    #[allow(dead_code)]
     pub entity_id: i64,
     pub ability_sets: String,
 }
--- voxygen/src/credits.rs.orig	2024-05-15 12:12:16 UTC
+++ voxygen/src/credits.rs
@@ -7,6 +7,7 @@ use std::path::PathBuf;
 
 // See best practices for attribution: https://wiki.creativecommons.org/wiki/Best_practices_for_attribution
 
+#[allow(dead_code)]
 #[derive(Clone, Deserialize)]
 pub struct Art {
     /// Name of the art.
--- voxygen/src/hud/mod.rs.orig	2024-05-15 12:12:16 UTC
+++ voxygen/src/hud/mod.rs
@@ -1,3 +1,4 @@
+#![allow(non_local_definitions)] // because of WidgetCommon derive
 mod animation;
 mod bag;
 mod buffs;
--- voxygen/src/render/renderer/rain_occlusion_map.rs.orig	2024-05-15 12:12:16 UTC
+++ voxygen/src/render/renderer/rain_occlusion_map.rs
@@ -11,7 +11,6 @@ pub struct RainOcclusionMapRenderer {
 
     pub terrain_pipeline: rain_occlusion::RainOcclusionPipeline,
     pub figure_pipeline: rain_occlusion::RainOcclusionFigurePipeline,
-    pub layout: rain_occlusion::RainOcclusionLayout,
 }
 
 pub enum RainOcclusionMap {
@@ -31,13 +30,10 @@ impl RainOcclusionMap {
         if let (Some(terrain_pipeline), Some(figure_pipeline), Some(depth)) =
             (directed, figure, view)
         {
-            let layout = rain_occlusion::RainOcclusionLayout::new(device);
-
             Self::Enabled(RainOcclusionMapRenderer {
                 depth,
                 terrain_pipeline,
                 figure_pipeline,
-                layout,
             })
         } else {
             Self::Disabled(Self::create_dummy_tex(device, queue))
--- voxygen/src/render/renderer/shadow_map.rs.orig	2024-05-15 12:12:16 UTC
+++ voxygen/src/render/renderer/shadow_map.rs
@@ -12,7 +12,6 @@ pub struct ShadowMapRenderer {
     pub terrain_directed_pipeline: shadow::ShadowPipeline,
     pub figure_directed_pipeline: shadow::ShadowFigurePipeline,
     pub debug_directed_pipeline: shadow::ShadowDebugPipeline,
-    pub layout: shadow::ShadowLayout,
 }
 
 pub enum ShadowMap {
@@ -43,8 +42,6 @@ impl ShadowMap {
         {
             let (point_depth, directed_depth) = shadow_views;
 
-            let layout = shadow::ShadowLayout::new(device);
-
             Self::Enabled(ShadowMapRenderer {
                 directed_depth,
                 point_depth,
@@ -53,8 +50,6 @@ impl ShadowMap {
                 terrain_directed_pipeline,
                 figure_directed_pipeline,
                 debug_directed_pipeline,
-
-                layout,
             })
         } else {
             let (dummy_point, dummy_directed) = Self::create_dummy_shadow_tex(device, queue);
--- voxygen/src/scene/terrain.rs.orig	2024-05-15 12:12:16 UTC
+++ voxygen/src/scene/terrain.rs
@@ -153,22 +153,6 @@ struct MeshWorkerResponse {
     blocks_of_interest: BlocksOfInterest,
 }
 
-/// Conversion of SpriteSpec from a hashmap failed because some sprites were
-/// missing.
-struct SpritesMissing(Vec<SpriteKind>);
-
-use core::fmt;
-
-impl fmt::Display for SpritesMissing {
-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-        writeln!(
-            f,
-            "Missing entries in the sprite manifest for these sprites: {:?}",
-            &self.0,
-        )
-    }
-}
-
 pub fn get_sprite_instances<'a, I: 'a>(
     lod_levels: &'a mut [I; SPRITE_LOD_LEVELS],
     set_instance: impl Fn(&mut I, SpriteInstance, Vec3<i32>),
--- voxygen/src/ui/widgets/mod.rs.orig	2024-05-15 12:12:16 UTC
+++ voxygen/src/ui/widgets/mod.rs
@@ -1,3 +1,4 @@
+#![allow(non_local_definitions)] // because of WidgetCommon derive
 pub mod ghost_image;
 pub mod image_frame;
 pub mod image_slider;
--- world/Cargo.toml.orig	2024-05-15 12:12:16 UTC
+++ world/Cargo.toml
@@ -7,7 +7,7 @@ be-dyn-lib = []
 [features]
 use-dyn-lib = ["common-dynlib"]
 be-dyn-lib = []
-simd = ["vek/platform_intrinsics", "packed_simd"]
+simd = ["vek/platform_intrinsics"]
 bin_compression = ["lz-fear", "deflate", "flate2", "image/jpeg", "num-traits", "fallible-iterator", "rstar", "cli"]
 cli = ["clap", "signal-hook", "indicatif"]
 
@@ -36,7 +36,6 @@ arr_macro = "0.2.1"
 rand = { workspace = true }
 rand_chacha = { workspace = true }
 arr_macro = "0.2.1"
-packed_simd = { version = "0.3.9", optional = true }
 rayon = { workspace = true }
 serde = { workspace = true }
 ron = { workspace = true }
--- world/src/layer/mod.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/layer/mod.rs
@@ -23,7 +23,7 @@ use common::{
     generation::{ChunkSupplement, EntityInfo},
     lottery::Lottery,
     terrain::{Block, BlockKind, SpriteKind},
-    vol::{BaseVol, ReadVol, RectSizedVol, WriteVol},
+    vol::{ReadVol, RectSizedVol, WriteVol},
 };
 use hashbrown::HashMap;
 use noise::NoiseFn;
@@ -576,7 +576,7 @@ pub fn apply_caves_supplement<'a>(
     dynamic_rng: &mut impl Rng,
     wpos2d: Vec2<i32>,
     mut get_column: impl FnMut(Vec2<i32>) -> Option<&'a ColumnSample<'a>>,
-    vol: &(impl BaseVol<Vox = Block> + RectSizedVol + ReadVol + WriteVol),
+    vol: &(impl RectSizedVol<Vox = Block> + ReadVol + WriteVol),
     index: IndexRef,
     supplement: &mut ChunkSupplement,
 ) {
--- world/src/layer/wildlife.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/layer/wildlife.rs
@@ -6,7 +6,7 @@ use common::{
     resources::TimeOfDay,
     terrain::{BiomeKind, Block},
     time::DayPeriod,
-    vol::{BaseVol, ReadVol, RectSizedVol, WriteVol},
+    vol::{ReadVol, RectSizedVol, WriteVol},
 };
 use rand::prelude::*;
 use serde::Deserialize;
@@ -554,7 +554,7 @@ pub fn apply_wildlife_supplement<'a, R: Rng>(
     dynamic_rng: &mut R,
     wpos2d: Vec2<i32>,
     mut get_column: impl FnMut(Vec2<i32>) -> Option<&'a ColumnSample<'a>>,
-    vol: &(impl BaseVol<Vox = Block> + RectSizedVol + ReadVol + WriteVol),
+    vol: &(impl RectSizedVol<Vox = Block> + ReadVol + WriteVol),
     index: IndexRef,
     chunk: &SimChunk,
     supplement: &mut ChunkSupplement,
@@ -587,8 +587,7 @@ pub fn apply_wildlife_supplement<'a, R: Rng>(
 
             let entity_group = scatter
                 .iter()
-                .enumerate()
-                .filter_map(|(_i, (entry, get_density))| {
+                .filter_map(|(entry, get_density)| {
                     let density = get_density(chunk, col_sample) * wildlife_density_modifier;
                     (density > 0.0)
                         .then(|| {
--- world/src/lib.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/lib.rs
@@ -8,6 +8,7 @@
 #![allow(clippy::branches_sharing_code)] // TODO: evaluate
 #![deny(clippy::clone_on_ref_ptr)]
 #![feature(option_zip, let_chains)]
+#![cfg_attr(feature = "simd", feature(portable_simd))]
 
 mod all;
 mod block;
--- world/src/sim/erosion.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/sim/erosion.rs
@@ -13,14 +13,12 @@ use ordered_float::NotNan;
 use noise::NoiseFn;
 use num::{Float, Zero};
 use ordered_float::NotNan;
-#[cfg(feature = "simd")] use packed_simd::m32;
 use rayon::prelude::*;
 use std::{
     cmp::{Ordering, Reverse},
     collections::BinaryHeap,
-    f32, fmt, mem,
+    fmt, mem,
     time::Instant,
-    u32,
 };
 use vek::*;
 
@@ -609,15 +607,17 @@ fn get_max_slope(
 #[cfg(not(feature = "simd"))]
 #[derive(Copy, Clone)]
 #[allow(non_camel_case_types)]
-struct m32(u32);
+struct M32(u32);
 #[cfg(not(feature = "simd"))]
-impl m32 {
+impl M32 {
     #[inline]
-    fn new(x: bool) -> Self { if x { Self(u32::MAX) } else { Self(u32::MIN) } }
+    fn splat(x: bool) -> Self { if x { Self(u32::MAX) } else { Self(u32::MIN) } }
 
     #[inline]
-    fn test(&self) -> bool { self.0 != 0 }
+    fn test(&self, cmp: u32) -> bool { self.0 != cmp }
 }
+#[cfg(feature = "simd")]
+type M32 = std::simd::Mask<i32, 1>;
 
 /// Erode all chunks by amount.
 ///
@@ -862,7 +862,7 @@ fn erode(
     let mid_slope = (30.0 / 360.0 * 2.0 * std::f64::consts::PI).tan();
 
     type SimdType = f32;
-    type MaskType = m32;
+    type MaskType = M32;
 
     // Precompute factors for Stream Power Law.
     let czero = <SimdType as Zero>::zero();
@@ -1316,7 +1316,7 @@ fn erode(
                             let tolp = 1.0e-3;
                             let mut errp = 2.0 * tolp;
                             let mut rec_heights = [0.0; 8];
-                            let mut mask = [MaskType::new(false); 8];
+                            let mut mask = [MaskType::splat(false); 8];
                             mrec_downhill(map_size_lg, &mrec, posi).for_each(|(kk, posj)| {
                                 let posj_stack = mstack_inv[posj];
                                 let h_j = h_stack[posj_stack];
@@ -1324,7 +1324,7 @@ fn erode(
                                 // + uplift(posj) as f64
                                 // NOTE: We also considered using old_elev_i > wh[posj] here.
                                 if old_elev_i > h_j {
-                                    mask[kk] = MaskType::new(true);
+                                    mask[kk] = MaskType::splat(true);
                                     rec_heights[kk] = h_j as SimdType;
                                 }
                             });
@@ -1333,7 +1333,7 @@ fn erode(
                                 let mut df = 1.0;
                                 izip!(&mask, &rec_heights, k_fs_fact, k_df_fact).for_each(
                                     |(&mask_kk, &rec_heights_kk, &k_fs_fact_kk, &k_df_fact_kk)| {
-                                        if mask_kk.test() {
+                                        if mask_kk.test(0) {
                                             let h_j = rec_heights_kk;
                                             let elev_j = h_j;
                                             let dh = 0.0.max(new_h_i as SimdType - elev_j);
--- world/src/sim/mod.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/sim/mod.rs
@@ -858,8 +858,7 @@ impl WorldSim {
                                 (gen_ctx
                                     .alt_nz
                                     .get((wposf.div(10_000.0)).into_array())
-                                    .min(1.0)
-                                    .max(-1.0))
+                                    .clamp(-1.0, 1.0))
                                 .sub(0.05)
                                 .mul(0.35),
                             )
@@ -871,8 +870,7 @@ impl WorldSim {
                                 (gen_ctx
                                     .alt_nz
                                     .get((wposf.div(5_000.0 * gen_opts.scale)).into_array())
-                                    .min(1.0)
-                                    .max(-1.0))
+                                    .clamp(-1.0, 1.0))
                                 .add(
                                     0.2 - ((wposf / world_sizef) * 2.0 - 1.0)
                                         .magnitude_squared()
--- world/src/sim/util.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/sim/util.rs
@@ -7,7 +7,7 @@ use rayon::prelude::*;
 use noise::{MultiFractal, NoiseFn, Perlin, Seedable};
 use num::Float;
 use rayon::prelude::*;
-use std::{f32, f64, ops::Mul, u32};
+use std::ops::Mul;
 use vek::*;
 
 /// Calculates the smallest distance along an axis (x, y) from an edge of
--- world/src/site2/gen.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/site2/gen.rs
@@ -1415,18 +1415,6 @@ impl<'a, const N: usize> PrimitiveTransform for [Primi
     }
 }
 
-pub trait PrimitiveGroupFill<const N: usize> {
-    fn fill_many(self, fills: [Fill; N]);
-}
-
-impl<const N: usize> PrimitiveGroupFill<N> for [PrimitiveRef<'_>; N] {
-    fn fill_many(self, fills: [Fill; N]) {
-        for i in 0..N {
-            self[i].fill(fills[i].clone());
-        }
-    }
-}
-
 pub trait Structure {
     #[cfg(feature = "use-dyn-lib")]
     const UPDATE_FN: &'static [u8];
--- world/src/site/castle/mod.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/site/castle/mod.rs
@@ -14,7 +14,7 @@ use common::{
 use common::{
     generation::ChunkSupplement,
     terrain::{Block, BlockKind, SpriteKind},
-    vol::{BaseVol, ReadVol, RectSizedVol, WriteVol},
+    vol::{ReadVol, RectSizedVol, WriteVol},
 };
 use core::f32;
 use rand::prelude::*;
@@ -190,7 +190,7 @@ impl Castle {
         index: IndexRef,
         wpos2d: Vec2<i32>,
         mut get_column: impl FnMut(Vec2<i32>) -> Option<&'a ColumnSample<'a>>,
-        vol: &mut (impl BaseVol<Vox = Block> + RectSizedVol + ReadVol + WriteVol),
+        vol: &mut (impl RectSizedVol<Vox = Block> + ReadVol + WriteVol),
     ) {
         for y in 0..vol.size_xy().y as i32 {
             for x in 0..vol.size_xy().x as i32 {
--- world/src/site/settlement/mod.rs.orig	2024-05-15 12:12:16 UTC
+++ world/src/site/settlement/mod.rs
@@ -30,7 +30,7 @@ use common::{
     store::{Id, Store},
     terrain::{Block, BlockKind, SpriteKind, TerrainChunkSize},
     trade::{Good, SiteInformation},
-    vol::{BaseVol, ReadVol, RectSizedVol, RectVolSize, WriteVol},
+    vol::{ReadVol, RectSizedVol, RectVolSize, WriteVol},
 };
 
 use fxhash::FxHasher64;
@@ -560,7 +560,7 @@ impl Settlement {
         index: IndexRef,
         wpos2d: Vec2<i32>,
         mut get_column: impl FnMut(Vec2<i32>) -> Option<&'a ColumnSample<'a>>,
-        vol: &mut (impl BaseVol<Vox = Block> + RectSizedVol + ReadVol + WriteVol),
+        vol: &mut (impl RectSizedVol<Vox = Block> + ReadVol + WriteVol),
     ) {
         let colors = &index.colors.site.settlement;
 
