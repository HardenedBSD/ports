--- qimgv/components/directorymanager/watchers/directorywatcher.cpp.orig	2024-06-20 15:55:26 UTC
+++ qimgv/components/directorymanager/watchers/directorywatcher.cpp
@@ -1,6 +1,6 @@
 #include "directorywatcher_p.h"
 
-#ifdef __linux__
+#if defined(__FreeBSD__) || defined(__linux__)
 #include "linux/linuxwatcher.h"
 #elif _WIN32
 #include "windows/windowswatcher.h"
@@ -34,7 +34,7 @@ DirectoryWatcher *DirectoryWatcher::newInstance()
 {
     DirectoryWatcher* watcher;
 
-#ifdef __linux__
+#if defined(__FreeBSD__) || defined(__linux__)
         watcher = new LinuxWatcher();
 #elif _WIN32
         watcher = new WindowsWatcher();
--- qimgv/core.cpp.orig	2024-06-20 15:55:26 UTC
+++ qimgv/core.cpp
@@ -728,7 +728,7 @@ void Core::showInDirectory() {
         QDesktopServices::openUrl(QUrl::fromLocalFile(model->directoryPath()));
         return;
     }
-#ifdef __linux__
+#if defined(__FreeBSD__) || defined(__linux__)
     QString fm = ScriptManager::runCommand("xdg-mime query default inode/directory");
     if(fm.contains("dolphin"))
         ScriptManager::runCommandDetached("dolphin --select " + selectedPath());
--- qimgv/settings.cpp.orig	2024-06-20 15:55:26 UTC
+++ qimgv/settings.cpp
@@ -3,7 +3,7 @@ Settings::Settings(QObject *parent) : QObject(parent) 
 Settings *settings = nullptr;
 
 Settings::Settings(QObject *parent) : QObject(parent) {
-#ifdef __linux__
+#if defined(__FreeBSD__) || defined(__linux__)
     // config files
     QSettings::setDefaultFormat(QSettings::NativeFormat);
     settingsConf = new QSettings();
@@ -38,7 +38,7 @@ void Settings::setupCache() {
 }
 //------------------------------------------------------------------------------
 void Settings::setupCache() {
-#ifdef __linux__
+#if defined(__FreeBSD__) || defined(__linux__)
     QString genericCacheLocation = QStandardPaths::writableLocation(QStandardPaths::GenericCacheLocation);
     if(genericCacheLocation.isEmpty())
         genericCacheLocation = QDir::homePath() + "/.cache";
@@ -292,6 +292,8 @@ QString Settings::mpvBinary() {
     if(!QFile::exists(mpvPath)) {
     #ifdef _WIN32
         mpvPath = QCoreApplication::applicationDirPath() + "/mpv.exe";
+    #elif defined __FreeBSD__
+        mpvPath = "/usr/local/bin/mpv";
     #elif defined __linux__
         mpvPath = "/usr/bin/mpv";
     #endif
--- qimgv/shortcutbuilder.cpp.orig	2024-06-20 15:55:26 UTC
+++ qimgv/shortcutbuilder.cpp
@@ -64,7 +64,7 @@ QString ShortcutBuilder::processKeyEvent(QKeyEvent *ev
 QString ShortcutBuilder::processKeyEvent(QKeyEvent *event) {
     if(event->type() != QEvent::KeyPress || isModifier(Qt::Key(event->key())))
         return "";
-#if defined(__linux__) || defined(_WIN32)
+#if defined(__FreeBSD__) || defined(__linux__) || defined(_WIN32)
     return fromEventNativeScanCode(event);
 #else
     return fromEventText(event);
--- qimgv/utils/inputmap.cpp.orig	2024-06-20 15:55:26 UTC
+++ qimgv/utils/inputmap.cpp
@@ -162,7 +162,7 @@ void InputMap::initKeyMap() {
     keyMap.insert( 57397 , "/" );
     keyMap.insert( 57372 , "Enter" );
 
-#elif defined __linux__
+#elif defined(__FreeBSD__) || defined(__linux__)
     // linux keymap for qimgv
 
     // row 1
--- qimgv/utils/stuff.cpp.orig	2024-06-20 15:55:26 UTC
+++ qimgv/utils/stuff.cpp
@@ -8,7 +8,7 @@ int probeOS() {
 int probeOS() {
 #ifdef TARGET_OS_MAC
     return 0;
-#elif defined __linux__
+#elif defined(__FreeBSD__) || defined(__linux__)
     return 1;
 #elif defined _WIN32 || defined _WIN64
     return 2;
--- qimgv/utils/wallpapersetter.cpp.orig	2024-06-20 15:55:26 UTC
+++ qimgv/utils/wallpapersetter.cpp
@@ -11,7 +11,7 @@ void WallpaperSetter::setWallpaper(QString path) {
                                    (PVOID) path.utf16(),
                                    SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);
     qDebug() << "wallpaper changed:" << (ok ? "true" : "false");
-#elif defined __linux__
+#elif defined(__FreeBSD__) || defined(__linux__)
     QString command;
     command = "qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript \'var allDesktops = desktops(); print (allDesktops); for (i = 0; i < allDesktops.length; i++) { d = allDesktops[i]; d.wallpaperPlugin = \"org.kde.image\"; d.currentConfigGroup = Array(\"Wallpaper\", \"org.kde.image\", \"General\"); d.writeConfig(\"Image\", \"" + path + "\") } \'";
     QProcess process;
